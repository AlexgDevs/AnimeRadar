import asyncio
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select

from ..utils import UserState
from ..database import UserAnime, Session, Anime
from ..keyboards import anime_buttons_changed_btn_add_to_waching_or_not

library_reply_handler = Router()


async def get_anime_on_filter(message: Message, bot: Bot, filter: str, caption: str, other_text: str):

    user_id = message.from_user.id
    async with Session() as session:
        planned_anime = await session.scalars(select(UserAnime.mal_id).filter(UserAnime.user_id == user_id, UserAnime.status == filter))
        all_planned_mal_ids = planned_anime.all()

        if all_planned_mal_ids:
            await message.answer(f'–í–∞—à–∏ {caption} –∞–Ω–∏–º–µ:')
            for m_id in all_planned_mal_ids:
                anime = await session.scalar(select(Anime).filter(Anime.mal_id == m_id))
                await bot.send_photo(
                    chat_id=user_id,
                    photo=anime.image,
                    caption=f'Title: {anime.title}\n\nSynopsis: {anime.synopsis[:500]}...More\n\nEpisodes: {anime.episodes}',
                    reply_markup=anime_buttons_changed_btn_add_to_waching_or_not(anime.mal_id, filter)
                )
                await asyncio.sleep(0.3) # pagination cooming soon...
        
        else:
            await message.answer(other_text)



@library_reply_handler.message(F.text == 'üìÖ –í –ø–ª–∞–Ω–∞—Ö', UserState.user_action)
async def get_planned_anime(message: Message, bot: Bot):

    caption = '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'
    filter = 'planned'
    other_text = '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏–æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É'

    await get_anime_on_filter(message=message, bot=bot, filter=filter, caption=caption, other_text=other_text)



@library_reply_handler.message(F.text == '‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ')
async def get_viewed_anime(message: Message, bot: Bot):

    caption = '–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'
    filter = 'viewed'
    other_text = '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∏–º–µ.'

    await get_anime_on_filter(message=message, bot=bot, filter=filter, caption=caption, other_text=other_text)



@library_reply_handler.message(F.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', UserState.user_action)
async def get_anime_for_deleted(message: Message):

    user_id = message.from_user.id

    async with Session() as session:
        scalars_anime = await session.scalars(select(UserAnime.mal_id).filter(UserAnime.user_id == user_id))
        mal_ids = scalars_anime.all()

        if not mal_ids:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∏–º–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
            return

        builder = InlineKeyboardBuilder()
        for mal_id in mal_ids:
            anime = await session.scalar(select(Anime).filter(Anime.mal_id == mal_id))
            if anime:
                builder.button(text=f'{anime.title}', callback_data=f'anime_for_deleted:{anime.mal_id}')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:', reply_markup=builder.adjust(3).as_markup())



@library_reply_handler.callback_query(F.data.startswith('anime_for_deleted:'))
async def deleted_current_anime_for_library(callback: CallbackQuery):

    await callback.message.delete()
    mal_id = callback.data.split(':')[1]
    user_id = callback.from_user.id

    async with Session.begin() as session:

        user_anime = await session.scalar(select(UserAnime).filter(UserAnime.user_id == user_id, UserAnime.mal_id == mal_id))
        if user_anime:
            await session.delete(user_anime)
            await callback.message.answer('–ê–Ω–∏–º–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
